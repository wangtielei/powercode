/**
 * Copyright 2009 Jeff Verkoeyen
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "OverlayView.h"
#import <AVFoundation/AVFoundation.h>

static const CGFloat kPadding = 30;

@interface OverlayView()
@property (nonatomic,assign) UIButton *cancelButton;
@property (nonatomic,assign) UIButton *flashButton;
@property (nonatomic,retain) UILabel *instructionsLabel;
@end


@implementation OverlayView

@synthesize delegate, oneDMode;
@synthesize points = _points;
@synthesize flashButton;
@synthesize cancelButton;
@synthesize cropRect;
@synthesize instructionsLabel;
@synthesize displayedMessage;
@synthesize scanLine = _scanLine;
@synthesize curYPos = _curYPos;           //当前扫描线的Y坐标
@synthesize isMovingDown = _isMovingDown; //当前扫描线移动方向
@synthesize scanTimer = _scanTimer;       //移动线的定时器

////////////////////////////////////////////////////////////////////////////////////////////////////
- (id) initWithFrame:(CGRect)theFrame cancelEnabled:(BOOL)isCancelEnabled torchEnabled:(BOOL)isTorchEnabled oneDMode:(BOOL)isOneDModeEnabled
{
    self = [super initWithFrame:theFrame];
    if( self ) 
    {
        CGFloat rectSize = self.frame.size.width - kPadding * 2;
        cropRect = CGRectMake(kPadding, (self.frame.size.height - rectSize) / 2 - 50, rectSize, rectSize);
      
        self.backgroundColor = [UIColor clearColor];
        self.oneDMode = isOneDModeEnabled;
      
        if (self.oneDMode) 
        {
            _scanLine = [[UIView alloc]initWithFrame:CGRectMake(cropRect.origin.x, cropRect.origin.y, cropRect.size.width, 1)];
            [_scanLine setBackgroundColor:[UIColor redColor]];
            _scanLine.hidden = NO;
            self.curYPos = cropRect.origin.y;
            self.isMovingDown = TRUE; //一开始是往下移动
            [self addSubview:_scanLine];
        }
      
        if (isCancelEnabled)
        {
            self.cancelButton = [UIButton buttonWithType:UIButtonTypeRoundedRect];
            [cancelButton setTitle:@"Cancel" forState:UIControlStateNormal];
            CGSize theSize = CGSizeMake(100, 50);
            CGRect theRect = CGRectMake(20, cropRect.origin.y+cropRect.size.height+20, theSize.width, theSize.height);
            [cancelButton setFrame:theRect];
            
            [cancelButton addTarget:self action:@selector(onCancel:) forControlEvents:UIControlEventTouchUpInside];
            [self addSubview:cancelButton];
        }
        
        if (isTorchEnabled) 
        {
            CGSize theSize = CGSizeMake(48, 48);
            CGRect theRect = CGRectMake(theFrame.size.width - theSize.width - 15, cropRect.origin.y-theSize.height-8, theSize.width, theSize.height);
            self.flashButton = [[UIButton alloc] initWithFrame:theRect];
            [flashButton setTitle:@"Flash" forState:UIControlStateNormal];
            [flashButton setImage:[UIImage imageNamed:@"flashon.png"] forState:UIControlStateNormal];
            [flashButton setBackgroundColor:[UIColor clearColor]];
            [flashButton addTarget:self action:@selector(onFlashLight:) forControlEvents:UIControlEventTouchUpInside];
            [self addSubview:flashButton];
        }
    }
    return self;
}

- (void)onFlashLight:(id)sender 
{
    if (delegate != nil)
    {
        BOOL status = [delegate swtichTorch];
        if (status)
        {
            [flashButton setImage:[UIImage imageNamed:@"flashoff.png"] forState:UIControlStateNormal];
        }
        else 
        {
            [flashButton setImage:[UIImage imageNamed:@"flashon.png"] forState:UIControlStateNormal];
        }
    }
}

- (void)onCancel:(id)sender
{
    if (delegate != nil)
    {
        [delegate cancelled];
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
- (void) dealloc 
{
	[_points release];
    [instructionsLabel release];
    [displayedMessage release];
    
    if (self.scanLine)
    {
        [self.scanLine release];
    }
    if (self.scanTimer)
    {
        [self.scanTimer release];
    }
    
	[super dealloc];
}


- (void)drawRect:(CGRect)rect inContext:(CGContextRef)context 
{
    CGContextSetLineWidth(context, 2);
	CGContextBeginPath(context);
	CGContextMoveToPoint(context, rect.origin.x, rect.origin.y);
	CGContextAddLineToPoint(context, rect.origin.x + rect.size.width, rect.origin.y);
	CGContextAddLineToPoint(context, rect.origin.x + rect.size.width, rect.origin.y + rect.size.height);
	CGContextAddLineToPoint(context, rect.origin.x, rect.origin.y + rect.size.height);
	CGContextAddLineToPoint(context, rect.origin.x, rect.origin.y);
	CGContextStrokePath(context);
}

- (void)drawVirtualRect:(CGRect)rect inContext:(CGContextRef)context 
{
    CGFloat length = 30.0f;
    //设置线条为2个单位宽
    CGContextSetLineWidth(context, 5);
	CGContextBeginPath(context);
    //从左上角的竖线开始,顺时针顺序画
	CGContextMoveToPoint(context, rect.origin.x, rect.origin.y + length);
    CGContextAddLineToPoint(context, rect.origin.x, rect.origin.y);
	CGContextAddLineToPoint(context, rect.origin.x + length, rect.origin.y);
    
    CGContextMoveToPoint(context, rect.origin.x + rect.size.width - length, rect.origin.y);
	CGContextAddLineToPoint(context, rect.origin.x + rect.size.width, rect.origin.y);
    CGContextAddLineToPoint(context, rect.origin.x + rect.size.width, rect.origin.y + length);
    
    CGContextMoveToPoint(context, rect.origin.x + rect.size.width, rect.origin.y + rect.size.height - length);
	CGContextAddLineToPoint(context, rect.origin.x + rect.size.width, rect.origin.y + rect.size.height);
    CGContextAddLineToPoint(context, rect.origin.x + rect.size.width - length, rect.origin.y + rect.size.height);
    
	CGContextMoveToPoint(context, rect.origin.x + length, rect.origin.y + rect.size.height);
	CGContextAddLineToPoint(context, rect.origin.x, rect.origin.y + rect.size.height);
    CGContextAddLineToPoint(context, rect.origin.x, rect.origin.y + rect.size.height - length);
    
	CGContextStrokePath(context);
    //恢复线条宽度
    CGContextSetLineWidth(context, 1);
}

- (void)drawScanLine:(CGContextRef)context
{
    CGFloat red[4] = {0.0f, 1.0f, 0.0f, 1.0f};
    CGContextSetStrokeColor(context, red);
    CGContextSetFillColor(context, red);
    CGContextBeginPath(context);
    CGContextMoveToPoint(context, cropRect.origin.x, cropRect.origin.y + cropRect.size.height/2);
    CGContextAddLineToPoint(context, cropRect.origin.x + cropRect.size.width, cropRect.origin.y + cropRect.size.height/2);
    CGContextStrokePath(context);
}

- (CGPoint)map:(CGPoint)point 
{
    CGPoint center;
    center.x = cropRect.size.width/2;
    center.y = cropRect.size.height/2;
    float x = point.x - center.x;
    float y = point.y - center.y;
    int rotation = 90;
    switch(rotation) {
    case 0:
        point.x = x;
        point.y = y;
        break;
    case 90:
        point.x = -y;
        point.y = x;
        break;
    case 180:
        point.x = -x;
        point.y = -y;
        break;
    case 270:
        point.x = y;
        point.y = -x;
        break;
    }
    point.x = point.x + center.x;
    point.y = point.y + center.y;
    return point;
}

//移动扫描线
- (void)setScan:(BOOL)begin
{    
    if (!oneDMode)
        return;
    
    if (begin)
    {
        if (self.scanTimer)
            return;
        
        self.scanTimer = [NSTimer scheduledTimerWithTimeInterval:0.01 target:self selector:@selector(moveScanLine:) userInfo:nil repeats:YES];
    }
    else 
    {
        if (self.scanTimer)
        {
            [self.scanTimer invalidate];
        }
    }
}

- (void) moveScanLine: (NSTimer *) timer
{
    if (self.isMovingDown)
    {  
        if (self.curYPos >= (cropRect.origin.y + cropRect.size.height))
        {
            self.curYPos = cropRect.origin.y + cropRect.size.height -1;
            self.isMovingDown = FALSE;
        }
        else 
        {
            self.curYPos = self.curYPos + 1;
        }
    }
    else 
    {
        if (self.curYPos <= cropRect.origin.y)
        {
            self.curYPos = cropRect.origin.y + 1;
            self.isMovingDown = TRUE;
        }
        else 
        {
            self.curYPos = self.curYPos - 1;
        }
    }

    self.scanLine.center = CGPointMake(cropRect.origin.x+(cropRect.size.width)/2, self.curYPos);
}

#define kTextMargin 10

////////////////////////////////////////////////////////////////////////////////////////////////////
- (void)drawRect:(CGRect)rect 
{
	[super drawRect:rect];
    
    if (displayedMessage == nil) 
    {
        self.displayedMessage = @"请将二维码放到取景框里";
    }
	CGContextRef c = UIGraphicsGetCurrentContext();
	    
    //设置取景线颜色
	CGFloat white[4] = {1.0f, 1.0f, 1.0f, 1.0f};
	CGContextSetStrokeColor(c, white);
	CGContextSetFillColor(c, white);
    //画取景线
	[self drawVirtualRect:cropRect inContext:c];
    
    CGContextSaveGState(c);
 
    //画文本
    UIFont *font = [UIFont systemFontOfSize:18];
    CGSize constraint = CGSizeMake(rect.size.width - 2 * kTextMargin, cropRect.origin.y);
    CGSize displaySize = [self.displayedMessage sizeWithFont:font constrainedToSize:constraint];
    CGRect displayRect = CGRectMake((rect.size.width - displaySize.width) / 2 , cropRect.origin.y - displaySize.height - 15, displaySize.width, displaySize.height);
    [self.displayedMessage drawInRect:displayRect withFont:font lineBreakMode:UILineBreakModeWordWrap alignment:UITextAlignmentCenter];
    
    CGContextRestoreGState(c);
    
	if( nil != _points ) 
    {
		CGFloat blue[4] = {0.0f, 1.0f, 0.0f, 1.0f};
		CGContextSetStrokeColor(c, blue);
		CGContextSetFillColor(c, blue);
       
        CGRect smallSquare = CGRectMake(0, 0, 10, 10);
        for( NSValue* value in _points ) 
        {
            CGPoint point = [self map:[value CGPointValue]];
            smallSquare.origin = CGPointMake(
                                             cropRect.origin.x + point.x - smallSquare.size.width / 2,
                                             cropRect.origin.y + point.y - smallSquare.size.height / 2);
            [self drawRect:smallSquare inContext:c];
        }
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
- (void) setPoints:(NSMutableArray*)pnts {
    [pnts retain];
    [_points release];
    _points = pnts;
	
    if (pnts != nil) {
        self.backgroundColor = [UIColor colorWithWhite:1.0 alpha:0.25];
    }
    [self setNeedsDisplay];
}

- (void) setPoint:(CGPoint)point {
    if (!_points) {
        _points = [[NSMutableArray alloc] init];
    }
    if (_points.count > 3) {
        [_points removeObjectAtIndex:0];
    }
    [_points addObject:[NSValue valueWithCGPoint:point]];
    [self setNeedsDisplay];
}


@end
